name: CI

on:
  push:
    branches:
      - master
      - "release/**"
      - "dev/**"
    tags: [v*]
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.10", "3.14"]
        include:
          - os: windows-latest
            python-version: '3.10'
    name: Run linting on Python ${{ matrix.python-version }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}
      - name: Install dependencies
        run: uv sync --all-extras
      - name: Coverage
        run: uv run poe cov
      - name: Run Lint
        run: uv run poe lint
      - name: Run Format Check
        run: uv run poe style
      - name: Run Docs Format Check
        run: uv run poe style-docs
      - name: Run typechecks
        run: uv run poe typing

  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.10", "3.11", "3.12", "3.13", "3.14", "pypy3.11", "graalpy-3.12"]
        include:
          - os: windows-latest
            python-version: '3.10'

    name: Run unittests on Python ${{ matrix.python-version }} on ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    - name: Install dev dependencies
      run: uv sync --all-extras

    - name: Run the tests for selector loop
      run: uv run pytest
    
    - name: Run the tests for proactor loop
      if: ${{ matrix.os == 'windows-latest' }}
      run: uv run pytest --proactor
    
  testall:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Tests (matrix)
    needs: tests
    steps:
      - name: Check test matrix status
        if: ${{ needs.tests.result != 'success' }}
        run: exit 1

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [tests, lint]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Build wheels
      uses: pypa/cibuildwheel@v3
      env:
        CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-* cp314-*"
        CIBW_SKIP: "pp* *-musllinux_*"
        CIBW_TEST_COMMAND: >
          python -c "
          import asynkit;
          info = asynkit.get_implementation_info();
          print(f'Implementation: {info[\"implementation\"]}');
          assert info['c_extension_available'], 'C extension should be available in wheels'
          "
        CIBW_TEST_REQUIRES: pytest anyio
        CIBW_BUILD_VERBOSITY: 1

    - uses: actions/upload-artifact@v5
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [tests, lint]
    steps:
    - uses: actions/checkout@v3
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
    - name: Set up Python 3.13
      run: uv python install 3.13

    - name: Build sdist
      run: uv build --sdist

    - name: Test sdist installation
      run: |
        pip install dist/*.tar.gz
        python -c "
        import asynkit;
        info = asynkit.get_implementation_info();
        print(f'Implementation: {info[\"implementation\"]}');
        print('✓ Source distribution imports successfully')
        "

    - uses: actions/upload-artifact@v5
      with:
        name: sdist
        path: dist/*.tar.gz

  build_pure_python_wheel:
    name: Build pure Python wheel
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [tests, lint]
    steps:
    - uses: actions/checkout@v3
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
    - name: Set up Python 3.13
      run: uv python install 3.13

    - name: Build pure Python wheel (no C extension)
      run: ASYNKIT_DISABLE_CEXT=1 uv build --wheel

    - name: Test pure Python wheel
      run: |
        pip install dist/*.whl
        python -c "
        import asynkit;
        info = asynkit.get_implementation_info();
        print(f'Implementation: {info[\"implementation\"]}');
        assert info['implementation'] == 'Pure Python', 'Should be pure Python implementation';
        print('✓ Pure Python wheel works correctly')
        "

    - uses: actions/upload-artifact@v5
      with:
        name: pure-python-wheel
        path: dist/*.whl

  build-n-publish:
    name: Build and publish Python distributions to PyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - tests
      - lint
      - build_wheels
      - build_sdist
      - build_pure_python_wheel
    environment:
      name: pypi
      url: https://pypi.org/p/asynkit
    permissions:
      id-token: write
      contents: write  # Required for creating GitHub releases
    steps:
    - uses: actions/checkout@v3
    
    # Download all wheel artifacts
    - uses: actions/download-artifact@v3
      with:
        name: wheels-ubuntu-latest
        path: dist/
        
    - uses: actions/download-artifact@v3
      with:
        name: wheels-windows-latest
        path: dist/
        
    - uses: actions/download-artifact@v3
      with:
        name: wheels-macos-latest
        path: dist/
        
    - uses: actions/download-artifact@v3
      with:
        name: pure-python-wheel
        path: dist/
        
    - uses: actions/download-artifact@v3
      with:
        name: sdist
        path: dist/

    - name: Extract release notes
      id: extract_notes
      run: |
        python3 .github/scripts/extract_release_notes.py ${GITHUB_REF#refs/tags/} > release_notes.md
        echo "Release notes extracted for ${GITHUB_REF#refs/tags/}"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: false

    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
