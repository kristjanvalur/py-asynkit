[project]
name = "asynkit"
version = "0.12.0"
description = "A toolkit for Python coroutines"
authors = [
    {name = "Kristján Valur Jónsson", email = "sweskman@gmail.com"}
]
readme = "README.md"
keywords = ["asyncio", "eventloop"]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: AsyncIO",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.8"
dependencies = [
    "typing-extensions>=4.4.0",
]

[project.urls]
Repository = "https://github.com/kristjanvalur/py-asynkit"

[project.optional-dependencies]
dev = [
    "mypy>=0.991",
    "black>=22.3.0",
    "pytest>=7.1.1",
    "pytest-cov>=3.0.0",
    "poethepoet>=0.29.0",
    "ruff~=0.0.190",
    "anyio[trio]>=3.6.0,<3.7.0",
    "blacken-docs>=1.13.0",
]

[tool.poe]
# Use simple executor instead of Poetry
executor = {type = "simple"}

[tool.poe.tasks]
lint = "ruff ."
black = "black ."
test = "pytest tests examples"
cov = "pytest --cov=asynkit --cov-report term-missing --cov-branch"
typing = "mypy -p asynkit -p tests -p examples"
blacken-docs = "blacken-docs README.md"
blackall = ["black", "blacken-docs"]
check = ["style", "lint", "typing", "cov"]

[tool.poe.tasks.style]
help = "Validate black code style"
cmd  = "black . --check --diff"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/asynkit"]

[tool.hatch.build.targets.sdist]
include = [
    "src/asynkit",
    "tests",
    "examples",
    "README.md",
    "LICENSE",
    "CHANGES",
]

[tool.pytest.ini_options]
#addopts = "-ra -q"
python_files = [
    "test_*.py",
    "example_*.py",
]
testpaths = [
    "tests",
]
filterwarnings = [
    'ignore:You seem to already have a custom sys.excepthook:RuntimeWarning'
]

[tool.ruff]
select = [
    "E", "F", "I",
]
src = ["src", ]
# Ignore `F401` (unused import) in all `__init__.py` files
# Ignore `F403` (importing *) in all `__init__.py` files
[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]

[tool.mypy]

[[tool.mypy.overrides]]
module = "asynkit.*"
strict = true

[[tool.mypy.overrides]]
module = ["tests.*", "examples.*"]
check_untyped_defs = false
allow_untyped_defs = true
allow_untyped_calls = true

[[tool.mypy.overrides]]
module = [
    "asynkit.compat",
    "asynkit.experimental.interrupt",
    "asynkit.experimental.priority",
    "asynkit.loop.eventloop",
    "asynkit.tools",
    "tests.test_coro",
]
warn_unused_ignores=false

[[tool.mypy.overrides]]
module = "asynkit.compat"
disable_error_code="call-arg"


[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "@abstractmethod",
  "assert False",
  "TYPE_CHECKING",
  ]